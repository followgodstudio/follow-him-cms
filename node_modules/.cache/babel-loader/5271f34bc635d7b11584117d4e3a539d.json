{"ast":null,"code":"import PropTypes from \"prop-types\";\nimport validator from \"validator\";\n\nfunction validate(values) {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = \"Required\";\n  } else if (values.firstName.length > 35) {\n    errors.firstName = \"Must be 35 characters or less\";\n  } else {\n    // allow multiple words with space or dash in between\n    const nameRegexp = /^[a-z]+([a-z -]+[a-z]+)*$/i;\n\n    if (!nameRegexp.test(values.firstName)) {\n      errors.firstName = \"Please enter a valid value.\";\n    }\n  }\n\n  if (!values.lastName) {\n    errors.lastName = \"Required\";\n  } else if (values.lastName.length > 35) {\n    errors.lastName = \"Must be 35 characters or less\";\n  } else {\n    // allow multiple words with space or dash in between\n    const nameRegexp = /^[a-z]+([a-z -]+[a-z]+)*$/i;\n\n    if (!nameRegexp.test(values.lastName)) {\n      errors.lastName = \"Please enter a valid value.\";\n    }\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!validator.isEmail(values.email)) {\n    errors.email = \"Please specify a valid email address.\";\n  }\n\n  if (values.phoneNumber.length > 0) {\n    if (values.phoneNumber.length < 12) {\n      errors.phoneNumber = \"Please specify a valid phone number.\";\n    } else if (!validator.isMobilePhone(values.phoneNumber, [\"en-US\"])) {\n      errors.phoneNumber = \"Phone number is invalid.\";\n    }\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else {\n    const lowerCaseLettersRegexp = /[a-z]/g;\n    const upperCaseLettersRegexp = /[A-Z]/g;\n    const numberRegexp = /[0-9]/g;\n\n    if (values.password.length < 6 || values.password.length > 14 || !lowerCaseLettersRegexp.test(values.password) || !upperCaseLettersRegexp.test(values.password) || !numberRegexp.test(values.password)) {\n      errors.password = \"6-14 characters with at least 1: uppercase letter, lowercase letter and number.\";\n    }\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (values.confirmPassword !== values.password) {\n    errors.confirmPassword = \"Please confirm your password\";\n  }\n\n  return errors;\n}\n\nvalidate.propTypes = {\n  values: PropTypes.string.isRequired\n};\nexport default validate;","map":{"version":3,"sources":["/Users/mich1095/Development/follow-him-cms/src/pages/shared/SignUpPage/SignUpForm/validate.js"],"names":["PropTypes","validator","validate","values","errors","firstName","length","nameRegexp","test","lastName","email","isEmail","phoneNumber","isMobilePhone","password","lowerCaseLettersRegexp","upperCaseLettersRegexp","numberRegexp","confirmPassword","propTypes","string","isRequired"],"mappings":"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","sourcesContent":["import PropTypes from \"prop-types\";\nimport validator from \"validator\";\n\nfunction validate(values) {\n  const errors = {};\n\n  if (!values.firstName) {\n    errors.firstName = \"Required\";\n  } else if (values.firstName.length > 35) {\n    errors.firstName = \"Must be 35 characters or less\";\n  } else {\n    // allow multiple words with space or dash in between\n    const nameRegexp = /^[a-z]+([a-z -]+[a-z]+)*$/i;\n    if (!nameRegexp.test(values.firstName)) {\n      errors.firstName = \"Please enter a valid value.\";\n    }\n  }\n\n  if (!values.lastName) {\n    errors.lastName = \"Required\";\n  } else if (values.lastName.length > 35) {\n    errors.lastName = \"Must be 35 characters or less\";\n  } else {\n    // allow multiple words with space or dash in between\n    const nameRegexp = /^[a-z]+([a-z -]+[a-z]+)*$/i;\n    if (!nameRegexp.test(values.lastName)) {\n      errors.lastName = \"Please enter a valid value.\";\n    }\n  }\n\n  if (!values.email) {\n    errors.email = \"Required\";\n  } else if (!validator.isEmail(values.email)) {\n    errors.email = \"Please specify a valid email address.\";\n  }\n\n  if (values.phoneNumber.length > 0) {\n    if (values.phoneNumber.length < 12) {\n      errors.phoneNumber = \"Please specify a valid phone number.\";\n    } else if (!validator.isMobilePhone(values.phoneNumber, [\"en-US\"])) {\n      errors.phoneNumber = \"Phone number is invalid.\";\n    }\n  }\n\n  if (!values.password) {\n    errors.password = \"Required\";\n  } else {\n    const lowerCaseLettersRegexp = /[a-z]/g;\n    const upperCaseLettersRegexp = /[A-Z]/g;\n    const numberRegexp = /[0-9]/g;\n    if (\n      values.password.length < 6 ||\n      values.password.length > 14 ||\n      !lowerCaseLettersRegexp.test(values.password) ||\n      !upperCaseLettersRegexp.test(values.password) ||\n      !numberRegexp.test(values.password)\n    ) {\n      errors.password =\n        \"6-14 characters with at least 1: uppercase letter, lowercase letter and number.\";\n    }\n  }\n\n  if (!values.confirmPassword) {\n    errors.confirmPassword = \"Required\";\n  } else if (values.confirmPassword !== values.password) {\n    errors.confirmPassword = \"Please confirm your password\";\n  }\n\n  return errors;\n}\n\nvalidate.propTypes = {\n  values: PropTypes.string.isRequired,\n};\nexport default validate;\n"]},"metadata":{},"sourceType":"module"}
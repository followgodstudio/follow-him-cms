{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nexport const signUp = createAsyncThunk(\"user/signUp\", async userInfo => {\n  // endpoint uses credentials (email/password) if provided.\n  // otherwise, uses AUTH_TOKEN.\n  // TODO:\n  const response = await axios.post(\"http://localhost:3011/registration\", userInfo);\n  return response.data;\n});\nexport const logIn = createAsyncThunk(\"user/logIn\", async credentials => {\n  // endpoint uses credentials (email/password) if provided.\n  // otherwise, uses AUTH_TOKEN.\n  // TODO:\n  const response = await axios.post(\"http://localhost:3011/login\", credentials);\n  return response.data;\n}, // optional object for more advanced usage\n{\n  condition: credentials => {\n    // only run the thunk if the below returns true\n    return !!(localStorage.getItem(\"AUTH_TOKEN\") || credentials);\n  }\n});\nconst initialState = {\n  info: null,\n  isAuthenticated: false,\n  status: \"IDLE\",\n  // 'IDLE' | 'PENDING' | 'FULFILLED' | 'REJECTED'\n  error: null\n};\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut() {\n      localStorage.removeItem(\"AUTH_TOKEN\");\n      return initialState;\n    }\n\n  },\n  extraReducers: {\n    [logIn.pending]: state => {\n      state.status = \"PENDING\";\n      state.error = null;\n    },\n    [logIn.fulfilled]: (state, action) => {\n      state.status = \"FULFILLED\";\n      state.error = null;\n      state.info = action.payload.user;\n      state.isAuthenticated = true;\n      localStorage.setItem(\"AUTH_TOKEN\", action.payload.token);\n    },\n    [logIn.rejected]: (state, action) => {\n      state.status = \"REJECTED\";\n      state.error = action.error;\n    },\n    [signUp.pending]: state => {\n      state.status = \"PENDING\";\n      state.error = null;\n    },\n    [signUp.fulfilled]: (state, action) => {\n      state.status = \"FULFILLED\";\n      state.error = null;\n      state.info = action.payload.user;\n    },\n    [signUp.rejected]: (state, action) => {\n      state.status = \"REJECTED\";\n      state.error = action.error;\n    }\n  }\n});\nexport const {\n  logOut\n} = userSlice.actions;\nexport default userSlice.reducer;","map":{"version":3,"sources":["/Users/mich1095/Development/follow-him-cms/src/redux/slices/userSlice.js"],"names":["createSlice","createAsyncThunk","axios","signUp","userInfo","response","post","data","logIn","credentials","condition","localStorage","getItem","initialState","info","isAuthenticated","status","error","userSlice","name","reducers","logOut","removeItem","extraReducers","pending","state","fulfilled","action","payload","user","setItem","token","rejected","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\nexport const signUp = createAsyncThunk(\"user/signUp\", async (userInfo) => {\n  // endpoint uses credentials (email/password) if provided.\n  // otherwise, uses AUTH_TOKEN.\n  // TODO:\n  const response = await axios.post(\n    \"http://localhost:3011/registration\",\n    userInfo\n  );\n  return response.data;\n});\n\nexport const logIn = createAsyncThunk(\n  \"user/logIn\",\n  async (credentials) => {\n    // endpoint uses credentials (email/password) if provided.\n    // otherwise, uses AUTH_TOKEN.\n    // TODO:\n    const response = await axios.post(\n      \"http://localhost:3011/login\",\n      credentials\n    );\n    return response.data;\n  },\n  // optional object for more advanced usage\n  {\n    condition: (credentials) => {\n      // only run the thunk if the below returns true\n      return !!(localStorage.getItem(\"AUTH_TOKEN\") || credentials);\n    },\n  }\n);\n\nconst initialState = {\n  info: null,\n  isAuthenticated: false,\n  status: \"IDLE\", // 'IDLE' | 'PENDING' | 'FULFILLED' | 'REJECTED'\n  error: null,\n};\n\nconst userSlice = createSlice({\n  name: \"user\",\n  initialState,\n  reducers: {\n    logOut() {\n      localStorage.removeItem(\"AUTH_TOKEN\");\n      return initialState;\n    },\n  },\n  extraReducers: {\n    [logIn.pending]: (state) => {\n      state.status = \"PENDING\";\n      state.error = null;\n    },\n    [logIn.fulfilled]: (state, action) => {\n      state.status = \"FULFILLED\";\n      state.error = null;\n      state.info = action.payload.user;\n      state.isAuthenticated = true;\n      localStorage.setItem(\"AUTH_TOKEN\", action.payload.token);\n    },\n    [logIn.rejected]: (state, action) => {\n      state.status = \"REJECTED\";\n      state.error = action.error;\n    },\n    [signUp.pending]: (state) => {\n      state.status = \"PENDING\";\n      state.error = null;\n    },\n    [signUp.fulfilled]: (state, action) => {\n      state.status = \"FULFILLED\";\n      state.error = null;\n      state.info = action.payload.user;\n    },\n    [signUp.rejected]: (state, action) => {\n      state.status = \"REJECTED\";\n      state.error = action.error;\n    },\n  },\n});\n\nexport const { logOut } = userSlice.actions;\nexport default userSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}